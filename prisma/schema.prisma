// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  diaryPosts    DiaryPost[]
  chatHistories ChatHistory[]
  ToDo          ToDo[]
}

model DiaryPost {
  id        Int        @id @default(autoincrement())
  content   String
  emotion   String
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model ChatHistory {
  id        Int        @id @default(autoincrement())
  period    Int
  prompt    String
  response  String
  createdAt DateTime   @default(now())
  todos     ToDo[]     // 1対多の関係
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  @@index([userId])
}

model ToDo {
  id        Int          @id @default(autoincrement())
  todo      String
  createdAt DateTime     @default(now())
  chat      ChatHistory?  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int?
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model Transcription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  filename  String
  content   String
}